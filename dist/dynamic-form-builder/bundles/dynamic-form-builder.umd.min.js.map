{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://dynamic-form-builder/lib/dynamic-form-builder.service.ts","ng://dynamic-form-builder/lib/dynamic-form-builder.component.ts","ng://dynamic-form-builder/lib/dynamic-form-builder/dynamic-form-builder.component.ts","ng://dynamic-form-builder/lib/dynamic-form-builder/field-builder/field-builder.component.ts","ng://dynamic-form-builder/lib/dynamic-form-builder/atoms/textbox.ts","ng://dynamic-form-builder/lib/dynamic-form-builder/atoms/dropdown.ts","ng://dynamic-form-builder/lib/dynamic-form-builder/atoms/file.ts","ng://dynamic-form-builder/lib/dynamic-form-builder/atoms/checkbox.ts","ng://dynamic-form-builder/lib/dynamic-form-builder/atoms/radio.ts","ng://dynamic-form-builder/lib/dynamic-form-builder/atoms/date.ts","ng://dynamic-form-builder/lib/dynamic-form-builder/atoms/slider.ts","ng://dynamic-form-builder/lib/dynamic-form-builder/dynamic-form-builder.module.ts","ng://dynamic-form-builder/lib/dynamic-form-builder.module.ts"],"names":["__values","o","m","Symbol","iterator","i","call","next","length","value","done","DynamicFormBuilderComponent","http","_formBuilder","fb","this","questionTrigger","EventEmitter","fields","form","FormGroup","FormControl","JSON","stringify","unsubcribe","valueChanges","subscribe","update","console","log","prototype","ngOnInit","_this","eventsSubscription","events","data","dt","formBuild","obj","action","emit","formData","jsonData","responseType","onUpload","e","getFields","ngDistroy","onDrop","ele","len","position","field","type","label","placeholder","validations","options","description","required","minLenght","maxLength","name","key","maxDate","minDate","min","max","trnasformData","push","fieldsCtrls","_c","tslib_1.__values","_d","f","opts","_e","_f","opt","slice","formData_1","formData_1_1","onSubmit","ngOnDestroy","unsubscribe","onFieldUpdate","$event","parse","Component","args","selector","template","styleUrls","HttpClient","FormBuilder","Input","Output","DynamicFormBuilderComponent$1","drop","event","moveItemInArray","previousIndex","currentIndex","copyOrDeleteEvent","transferData","index","indexOf","eventFromChild","FieldBuilderComponent","sendDataToParent","openEdit","Object","defineProperty","controls","valid","dirty","loadFormElement","item","activeModelData","_id","autoCollect","saveEdit","closeModel","open","content","deleteOption","optionsArr","filter","AddNewOptions","newOptionKey","newOptionLabel","Array","isArray","copyElement","deleteElement","isDelete","ViewChild","static","TextBoxComponent","DropDownComponent","FileComponent","ngOnChange","styles","CheckBoxComponent","RadioComponent","DateComponent","SliderComponent","DynamicFormBuilderModule","NgModule","imports","CommonModule","ReactiveFormsModule","FormsModule","MatButtonModule","MatRadioModule","MatDatepickerModule","MatFormFieldModule","MatInputModule","MatSliderModule","MatSelectModule","AngularFontAwesomeModule","DragDropModule","declarations","exports","providers","DynamicFormBuilderModule1","HttpClientModule","MatTabsModule","DndModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core';\n\n// @Injectable({\n//   // providedIn: 'root'\n// })\nexport class DynamicFormBuilderService {\n\n  constructor() { }\n}\n","import { Component, OnInit, EventEmitter, Output, Input } from '@angular/core';\nimport { FormGroup, FormControl, FormBuilder, FormArray } from '@angular/forms';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { DndDropEvent } from 'ngx-drag-drop'\n\n// import  { } from './dynamic-form-builder.service'\n\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'lib-dynamic-form-builder',\n  template: `<style>\n  p {\n      font-family: Lato;\n    }\n    .noPadding {\n        padding: 0px;\n    }\n    .margin-5 {\n        margin-top:5%;\n    }\n    .element {\n      border: 1px solid #ccc;\n      padding: 10px;\n      margin-bottom: 10px;\n      color: #333;\n      text-align: left;\n      text-transform: capitalize;\n      box-shadow: 0 0px 0px rgba(0,0,0,0.19), 0 1px 1px rgba(0,0,0,0.23);\n  }\n    .form-group {\n        margin-bottom: 0.5rem;\n        border: 1px solid #ece7e7;\n    }\n    .cursor-pntr {\n        cursor: pointer;\n    }\n    \n    \n  </style>\n  <div class=\"col-sm-12\">\n      <div class=\"col-sm-4 noPadding\">\n        <div class=\"card\">\n          <div class=\"card-header\">ToolBox</div>\n          <div class=\"card-body\">\n            <!-- <dynamic-form-builder [fields]=\"getFields()\"></dynamic-form-builder> -->\n      \n            <div *ngFor=\"let item of jsonData\">\n              <div [dndDraggable]=\"item\"  class=\"col-sm-12 element\"  >{{ item.responseType }}</div>\n              <!-- <div class=\"col-sm-12 element\" (click)=\"addFormElement(item.responseType)\" >Number</div> -->\n            </div>\n            <!-- <div class=\"col-sm-12 element\" (click)=\"addFormElement('input')\" >Input</div>\n            <div class=\"col-sm-12 element\" (click)=\"addFormElement('number')\" >Number</div> -->\n          </div>\n        </div>\n      </div>\n\n    <div class=\"col-sm-8 noPadding\">\n    <mat-tab-group>\n    <mat-tab label=\"Page 1\"> \n    <div class=\"card\">\n          <div dndDropzone class=\"card-body\" (dndDrop)=\"onDrop($event)\">\n              <form (ngSubmit)=\"onSubmit(this.form.value)\" [formGroup]=\"form\" class=\"form-horizontal\">\n            <dynamic-form-builder [fields]=\"getFields()\" [form]=\"form\"  (onFieldUpdate)=\"onFieldUpdate($event)\" ></dynamic-form-builder>\n            </form>\n          </div>\n        </div>\n    </mat-tab>\n    <mat-tab label=\"Page 2\"> \n    <div class=\"card\">\n          <div dndDropzone class=\"card-body\" (dndDrop)=\"onDrop($event)\">\n              <form (ngSubmit)=\"onSubmit(this.form.value)\" [formGroup]=\"form\" class=\"form-horizontal\">\n            <dynamic-form-builder [fields]=\"getFields()\" [form]=\"form\"  (onFieldUpdate)=\"onFieldUpdate($event)\" ></dynamic-form-builder>\n            </form>\n          </div>\n        </div>\n     </mat-tab>\n    <mat-tab label=\"Page 3\">\n    <div class=\"card\">\n          <div dndDropzone class=\"card-body\" (dndDrop)=\"onDrop($event)\">\n              <form (ngSubmit)=\"onSubmit(this.form.value)\" [formGroup]=\"form\" class=\"form-horizontal\">\n            <dynamic-form-builder [fields]=\"getFields()\" [form]=\"form\"  (onFieldUpdate)=\"onFieldUpdate($event)\" ></dynamic-form-builder>\n            </form>\n          </div>\n        </div>\n     </mat-tab>\n    </mat-tab-group>\n      </div>\n\n\n      </div>\n      <div class=\"col-sm-12\">\n      </div>`,\n  styleUrls: []\n})\nexport class DynamicFormBuilderComponent implements OnInit {\n  public form: FormGroup;\n  unsubcribe: any;\n  jsonData: any;\n  formData: any;\n  pageNumber: any;\n\n  // @Input() data;\n  @Input() events: Observable<any>;\n  // @Output() questionList = new EventEmitter();\n  @Output() questionTrigger = new EventEmitter();\n  eventsSubscription: any\n\n  public fields: any[] = [];\n\n  constructor(private http: HttpClient, private _formBuilder: FormBuilder, private fb: FormBuilder) {\n    // this.form = new FormGroup({\n    //   fields: this.fb.array([]),\n    // })\n    this.form = new FormGroup({\n      fields: new FormControl(JSON.stringify(this.fields))\n    })\n\n    this.unsubcribe = this.form.valueChanges.subscribe((update) => {\n      console.log(update);\n      // this.fields = JSON.parse(update.fields);\n    });\n  }\n\n\n\n  ngOnInit() {\n\n    this.eventsSubscription = this.events.subscribe(data => {\n      console.log(\"calling from parent with data\", data);\n      if (data) {\n        let dt = data;\n        this.formBuild(dt);\n      } else {\n        let obj = {\n          action: \"all\",\n          data: this.fields\n        }\n        console.log(\"to get all\", this.fields);\n        this.questionTrigger.emit(obj);\n      }\n    })\n    this.formData = [];\n    this.jsonData = [\n      {\n        \"responseType\": \"text\",\n\n      }, {\n        \"responseType\": \"number\",\n      }, {\n        \"responseType\": \"radio\",\n      },\n      {\n        \"responseType\": \"checkbox\",\n      },\n      {\n        \"responseType\": \"dropdown\"\n      },{\n        \"responseType\":\"date\"\n      },{\n        \"responseType\":\"slider\"\n      }\n    ]\n  }\n  onUpload(e) {\n    console.log(e);\n  }\n\n  getFields() {\n    return this.fields;\n  }\n\n  ngDistroy() {\n    this.unsubcribe();\n  }\n  onDrop(ele, action = \"\") {\n    console.log(\"drop ele\",ele);\n    if(ele.data){\n      ele = ele.data.responseType\n    }\n    let len = this.fields.length + 1;\n    var obj = {};\n    if (action == \"copy\") {\n      let copyObj = {\n        \"position\": len,\n        \"field\": len + \"question\",\n        \"type\": ele.type,\n        \"label\": ele.label,\n        \"placeholder\": ele.placeholder,\n        \"validations\": ele.validations,\n        \"options\": ele.options,\n        \"description\":ele.description\n      }\n      obj = copyObj;\n\n    } else {\n\n\n\n\n      if (ele == 'text') {\n        obj = {\n          \"position\": len,\n          \"field\": len + \"question\",\n          \"type\": \"text\",\n          \"label\": len + \". question\",\n          \"placeholder\": \"Please enter your question here\",\n          \"description\":\"\",\n          \"validations\": {\n            \"required\": true,\n            \"minLenght\": \"\",\n            \"maxLength\": \"\"\n          }\n        }\n      } else if (ele == 'number') {\n        obj = {\n          \"field\": len + \"question\",\n          \"type\": \"number\",\n          \"label\": len + \". question\",\n          \"placeholder\": \"Please enter your question here\",\n          \"description\":\"\",\n          \"validations\": {\n            \"required\": true,\n            \"minLenght\": \"\",\n            \"maxLength\": \"\"\n          }\n        }\n      } else if (ele == 'radio') {\n        obj = {\n          field: len + \"question\",\n          type: 'radio',\n          name: len + \". question\",\n          label: len + \". question\",\n          description:\"\",\n          required: true,\n          \"validations\": {\n            \"required\": true,\n            \"minLenght\": \"\",\n            \"maxLength\": \"\"\n          },\n          options: [\n            { key: 'option1', label: 'Label 1' },\n            { key: 'option2', label: 'Label 1' }\n          ]\n        }\n      } else if (ele == \"checkbox\") {\n        obj = {\n          field: len + \"question\",\n          type: \"checkbox\",\n          name: len + \". question\",\n          label: len + \". question\",\n          description:\"\",\n          required: true,\n          \"validations\": {\n            \"required\": true,\n            \"minLenght\": \"\",\n            \"maxLength\": \"\"\n          },\n          options: [\n            { key: 'option1', label: 'option 1' },\n            { key: 'option2', label: 'option 2' }\n          ]\n        }\n      } else if (ele == \"dropdown\") {\n        obj = {\n          field: len + \"question\",\n          type: 'dropdown',\n          name: len + \". question\",\n          label: len + \". question\",\n          value: 'option1',\n          description:\"\",\n          required: true,\n          \"validations\": {\n            \"required\": true,\n            \"minLenght\": \"\",\n            \"maxLength\": \"\"\n          },\n          options: [\n            { key: 'option1', label: 'Option 1' },\n            { key: 'option1', label: 'Option 2' }\n          ]\n        }\n      }\n      else if (ele == \"date\") {\n        obj = {\n          field: len + \"question\",\n          type: 'date',\n          name: len + \". question\",\n          label: len + \". question\",\n          description:\"\",\n          required: true,\n          \"validations\": {\n            \"required\": true,\n            \"minLenght\": \"\",\n            \"maxLength\": \"\",\n            \"maxDate\":\"\",\n            \"minDate\":\"\",\n\n          },\n          options: [\n         \n          ]\n        }\n      }else if (ele == \"slider\") {\n        obj = {\n          field: len + \"question\",\n          type: 'slider',\n          name: len + \". question\",\n          label: len + \". question\",\n          description:\"\",\n          required: true,\n          \"validations\": {\n            \"required\": true,\n            \"min\": \"\",\n            \"max\": \"\",\n            \"maxDate\":\"\",\n            \"minDate\":\"\",\n\n          },\n          options: [\n         \n          ]\n        }\n      }\n\n    }\n\n\n    let elem = this.fields;\n    let trnasformData = {\n      action: 'add',\n      data: obj\n    }\n    // console.log(\"transf\", trnasformData);\n    this.questionTrigger.emit(trnasformData);\n\n    this.formData.push(obj);\n    let fieldsCtrls = {};\n\n    this.form = new FormGroup(fieldsCtrls);\n    // console.log(\"------\", obj);\n    for (let f of this.formData) {\n\n\n      if (f['type'] != 'checkbox') {\n\n        console.log(\"f.type\", f['field']);\n        fieldsCtrls[f['field']] = new FormControl(f['value'] || '')\n      } else {\n\n        let opts = {};\n        for (let opt of f['options']) {\n\n          opts[opt.key] = new FormControl(opt.label);\n        }\n        fieldsCtrls[f['field']] = new FormGroup(opts)\n      }\n\n      // const creds = this.form.controls.fields as FormArray;\n      // creds.push(this.fb.group(fieldsCtrls));\n\n\n      // console.log(\"fieldsCtrls\",fieldsCtrls);\n\n      // this.formData =  this.fields;\n\n    }\n    this.form = new FormGroup(fieldsCtrls);\n    // this.fields\n    // this.formBuild();\n    this.fields.push(obj);\n    console.log(\"fields controls\", this.form);\n\n  }\n\n\n  formBuild(data) {\n    let formData = [];\n    this.fields = [];\n\n    this.fields.slice(this.fields.length, 0);\n    formData = data;\n    let fieldsCtrls = {};\n    this.form = new FormGroup(fieldsCtrls);\n    for (let f of formData) {\n      if (f['type'] != 'checkbox') {\n        console.log(\"f.type\", f['field']);\n        fieldsCtrls[f['field']] = new FormControl(f['value'] || '')\n      } else {\n        let opts = {};\n        for (let opt of f['options']) {\n          opts[opt.key] = new FormControl(opt.label);\n        }\n        fieldsCtrls[f['field']] = new FormGroup(opts)\n      }\n    }\n    this.form = new FormGroup(fieldsCtrls);\n\n    this.fields = formData;\n    let obj = {\n      action: \"all\",\n      data: formData\n    }\n\n    console.log(\"this.fields-------\", this.fields);\n    this.questionTrigger.emit(obj);\n\n\n    // this.fields = data;\n\n    // let fieldsCtrls = {};\n\n    // console.log(\" this.fields\", data);\n    // for (let f of data) {\n\n\n    //   if (f.type != 'checkbox') {\n\n    //     fieldsCtrls[f.name] = new FormControl(f.value || '')\n    //   } else {\n    //     let opts = {};\n    //     for (let opt of f.options) {\n\n    //       opts[opt.key] = new FormControl(opt.value);\n    //     }\n    //     fieldsCtrls[f.name] = new FormGroup(opts)\n    //   }\n    // }\n    // this.form = new FormGroup(fieldsCtrls);\n  }\n\n  onSubmit(value) {\n    console.log(\"value\", this.fields);\n\n    // this.questionList.emit(this.fields);\n\n    let obj = {\n      action: \"all\",\n      data: this.fields\n    }\n    this.questionTrigger.emit(obj);\n  }\n\n\n  // (event) {\n  //   console.log('Element was dragged', event);\n  // }\n\n  ngOnDestroy() {\n    this.eventsSubscription.unsubscribe()\n  }\n  onFieldUpdate($event) {\n    // console.log(\"eventData ------\", $event);\n    let trnasformData = {};\n    if ($event.action == \"copy\") {\n      this.onDrop($event.data, \"copy\");\n    } else\n      if ($event.action == \"delete\") {\n        trnasformData = {\n          action: 'delete',\n          data: $event\n        }\n      } else {\n        trnasformData = {\n          action: 'update',\n          data: JSON.parse($event)\n        }\n      }\n    this.questionTrigger.emit(trnasformData);\n  }\n}\n","import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\n\n@Component({\n  selector: 'dynamic-form-builder',\n  template:`\n   \n     <div cdkDropList (cdkDropListDropped)=\"drop($event)\"> <div *ngFor=\"let field of fields\"  cdkDrag>\n          <field-builder *ngIf=\"!field.isDeleted\" [field]=\"field\" [form]=\"form\"  (sendDataToParent)=\"eventFromChild($event)\" (copyOrDeleteEvent)=\"copyOrDeleteEvent($event)\"></field-builder>\n      </div></div>`, \n})\nexport class DynamicFormBuilderComponent implements OnInit {\n  @Output() onFieldUpdate = new EventEmitter();\n  @Input() fields: any[] = [];\n  // form: FormGroup;\n  @Input() form:any;\n  formData:any = [];\n  constructor() { }\n\n\n  drop(event: CdkDragDrop<string[]>) {\n    moveItemInArray(this.fields, event.previousIndex, event.currentIndex);\n  }\n\n  copyOrDeleteEvent(data){\n\n    let obj = data;\n    console.log(data,\"copyEvent occured\");\n\n    // data.field =(this.fields.length+1)+\"question\";\n    // data.label = (this.fields.length+1)+\" question\";\n\n    if(data.action==\"copy\"){\n\n      console.log(data,\"this.form before\");\n\n     let transferData =  {\n        action:\"copy\",\n        data:data\n      }\n\n      this.onFieldUpdate.emit(transferData);\n      \n    //  data.field = (this.fields.length+1)+\"question\";\n\n    //  console.log(\"data\",data)\n      // this.formBuild(obj);\n\n    }else if(data.action=\"delete\"){\n\n      var index = this.fields.indexOf(data);\n\n      console.log(\"ind\",index);\n      \n      this.onFieldUpdate.emit(data);\n\n      // this.fields.splice(index, 1);\n\n      \n\n      // this.fields = this.fields.filter(function(value, index, arr){\n      //   return value!=data;\n      // });\n     \n\n    \n      // console.log(\"evens\",evens);\n      // this.fields= evens;\n      // console.log(\"this.form\",this.form);\n      // this.fields.\n      // console.log(this.fields.length,\"copyEvent occured\",evens);\n    }\n    \n  }\n\n  eventFromChild(data){\n\n    this.onFieldUpdate.emit(data);\n    console.log(\"data from child  ------- \",data);\n  }\n\n  ngOnInit() {\n\n    this.formData = this.fields;\n\n    console.log(\"this.form ---\",this.form)\n    // this.formBuild();\n  }\n\n//   formBuild(item){\n//     let fieldsCtrls = {};\n\n//     this.form = new FormGroup(fieldsCtrls);\n\n//     // var formData = this.fields;\n\n//     // console.log(\"this.fields\",this.fields); \n\n//     let len = this.fields.length + 1;\n\n\n//     var obj = {\n//       \"position\":len,\n//       \"field\": len + \"question\",\n//       \"type\": item.type,\n//       \"label\": item.label,\n//       \"placeholder\": item.placeholder,\n//       \"validations\":item.validations  \n\n//     }\n   \n//     this.fields.push(obj);\n//    this.fields.forEach(function(f){\n//     // console.log(\"f.type\", f);\n\n//     if (f['type'] != 'checkbox') {\n   \n//       fieldsCtrls[f['field']] = new FormControl(f['value'] || '')\n//     } else {\n\n//       let opts = {};\n//       for (let opt of f['options']) {\n\n//         opts[opt.key] = new FormControl(opt.label);\n//       }\n//       fieldsCtrls[f['field']] = new FormGroup(opts)\n//     }\n//   });\n\n//   this.form = new FormGroup(fieldsCtrls);\n\n//   // console.log(\"fieldsCtrls\",fieldsCtrls);\n// }\n}\n","import { Component, Input, OnInit, ViewChild, ElementRef, EventEmitter, Output } from '@angular/core';\n// import { NgbModal, ModalDismissReasons } from '@ng-bootstrap/ng-bootstrap';\nimport { THIS_EXPR } from '@angular/compiler/src/output/output_ast';\n\n\n@Component({\n  selector: 'field-builder',\n  template: `\n  <style>\n  .mat-slider-horizontal {\n    min-width: 80% !important;\n  }\n  .example-radio-group {\n    display: flex;\n    flex-direction: block;\n    margin: 15px 0;\n  }\n\n  .mat-form-field {\n    display: block;\n    position: relative;\n    flex: auto;\n    min-width: 0;\n    width: 372px;\n  }\n  .input-group {\n    position: relative;\n     border-collapse: separate;\n     display: block;\n  }\n  \n  .example-radio-button {\n    margin: 5px;\n  }\n  .edit-icon {\n    position: relative;\n  width: 36px;\n  max-width: 57px;\n  right: 0px;\n  left: 94%;\n  top: 25px;cursor: pointer;z-index: 100;\n}\n  </style>\n  <div class=\"row\"  *ngIf=\"openEdit\" style=\"padding: 20px;\n  border: 1px solid #ccc;margin-top:10px;\n  box-shadow:0 4px 8px rgba(0,0,0,0.19), 0 2px 0px rgba(0,0,0,0.23);margin-left: 0px;\n  margin-right: 0px;\">\n\n    <div class=\"col-sm-7 form-group\">\n      <mat-form-field>\n        <input matInput placeholder=\"Label\" [(ngModel)]=\"label\" name=\"label\">\n      </mat-form-field>\n    </div>\n\n    <div class=\"col-sm-7 form-group\">\n      <mat-form-field>\n        <input matInput placeholder=\"Input Place Holder\" [(ngModel)]=\"placeholder\" name=\"placeholder\">\n      </mat-form-field>\n    </div>\n\n    <div class=\"col-sm-7 form-group\">\n      <mat-form-field>\n        <input matInput placeholder=\"Hint/Description\" [(ngModel)]=\"description\" name=\"placeholder\">\n      </mat-form-field>\n    </div>\n\n<div class=\"col-sm-7 form-group\">\n  <mat-form-field>\n  <mat-label>Input Type</mat-label>\n    <mat-select  [(ngModel)]=\"type\">\n      <mat-option value=\"text\">text</mat-option>\n      <mat-option value=\"number\">number</mat-option>\n      <mat-option value=\"radio\">radio</mat-option>\n      <mat-option value=\"date\">date</mat-option>\n    </mat-select>\n  </mat-form-field>\n</div>\n\n<div class=\"col-sm-7 form-group\">\n<mat-form-field>\n<mat-label>Input Type</mat-label>\n  <mat-select  [(ngModel)]=\"pageNumber\">\n    <mat-option value=\"page_1\">page 1</mat-option>\n    <mat-option value=\"page_2\">page 2</mat-option>\n    <mat-option value=\"page_3\">page 3</mat-option>\n  </mat-select>\n</mat-form-field>\n</div>\n\n    <div class=\"col-sm-7 form-group\" *ngIf=\"type=='slider'\">\n    <mat-form-field>\n    <input type=\"text\" placeholder=\"Min\" matInput  [(ngModel)]=\"min\" name=\"min value\">\n    </mat-form-field>\n    </div>\n\n    <div class=\"col-sm-7 form-group\" *ngIf=\"type=='slider'\">\n    <mat-form-field>\n    <input type=\"text\" placeholder=\"Max\" matInput  [(ngModel)]=\"max\" name=\"min value\">\n    </mat-form-field>\n    </div>\n    \n  <div class=\"col-sm-12 form-group\" *ngIf=\"type=='date'\">\n    <mat-form-field>\n      <input matInput [matDatepicker]=\"picker\" [(ngModel)]=\"minDate\" placeholder=\"Choose a min date\">\n      <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n      <mat-datepicker #picker></mat-datepicker>\n    </mat-form-field>\n\n    <mat-form-field>\n      <input matInput [matDatepicker]=\"pickerMaxDate\" [(ngModel)]=\"maxDate\" placeholder=\"Choose a max date\">\n      <mat-datepicker-toggle matSuffix [for]=\"pickerMaxDate\"></mat-datepicker-toggle>\n      <mat-datepicker #pickerMaxDate></mat-datepicker>\n    </mat-form-field>\n\n\n    </div>\n    <div class=\"col-sm-12 form-group\" *ngIf=\"type=='radio' || type=='checkbox' || type=='dropdown'\">\n    <label for=\"label\" class=\"col-sm-12\">Options</label>\n    \n    <ul class=\"col\" *ngFor=\"let opt of options;let index\">\n     <li class=\"\">\n      <span>{{opt.label}} </span><span style=\"\n      margin-left: 30px;\" (click)=\"deleteOption(opt,index)\">\n      <i class=\"fa fa-close\" style=\"font-size:36px;color:red\"></i></span>\n    </li>\n    \n    </ul>\n\n    <div class=\"col-sm-7 form-group\" *ngIf=\"type=='slider'\">\n    <mat-form-field>\n    <input type=\"text\" placeholder=\"Max\" matInput  [(ngModel)]=\"max\" name=\"min value\">\n    </mat-form-field>\n    </div>\n\n    <div class=\"col-sm-7 form-group\">\n    <div class=\"input-group\">\n    <mat-form-field>\n    <input type=\"text\" placeholder=\"Label\" matInput style=\"margin-bottom: 10px;\" [(ngModel)]=\"newOptionLabel\" name=\"newOption\">\n    </mat-form-field>\n    <mat-form-field>\n    <input type=\"tex\" matInput name=\"newOption\" placeholder=\"key\"  [(ngModel)]=\"newOptionKey\">\n    </mat-form-field>  \n    </div>\n      <button mat-flat-button color=\"primary\" style=\"margin-top: 10px;\"  (click)=\"AddNewOptions()\">\n      Add\n      </button>\n    </div>\n\n    \n    \n    </div>\n\n    \n<div class=\"col-sm-7\">\n<label id=\"example-radio-group-label\">is Reqired ?</label>\n<mat-radio-group\n  aria-labelledby=\"example-radio-group-label\"\n  class=\"example-radio-group\"\n  [(ngModel)]=\"required\">\n  <mat-radio-button class=\"example-radio-button\" [value]=true>\n    Yes\n  </mat-radio-button>\n  <mat-radio-button class=\"example-radio-button\" [value]=false>\n    No\n  </mat-radio-button>\n</mat-radio-group>\n</div>\n\n<div class=\"col-sm-7\" *ngIf=\"type=='date'\">\n<label id=\"example-radio-group-label\">is autoCollect</label>\n<mat-radio-group\n  aria-labelledby=\"example-radio-group-label\"\n  class=\"example-radio-group\"\n  [(ngModel)]=\"autoCollect\">\n  <mat-radio-button class=\"example-radio-button\" [value]=true>\n    True\n  </mat-radio-button>\n  <mat-radio-button class=\"example-radio-button\" [value]=false>\n    False\n  </mat-radio-button>\n</mat-radio-group>\n</div>\n\n  \n<div  class=\"col-sm-12\">\n\n<button mat-flat-button color=\"primary\" style=\"margin-right:10px;\"  (click)=\"closeModel('save')\">\nSave\n</button>\n\n</div>\n  </div>\n  <div class=\"form-group row\" [formGroup]=\"form\" style=\"background:#def9d8f5;padding:10px;margin:0px;margin-top:10px;box-shadow:0 0px 0px rgba(0,0,0,0.19), 0 1px 1px rgba(0,0,0,0.23)\">\n  \n  \n\n\n  <div class=\"col-sm-2 edit-icon\" ><i class=\"fa fa-edit\" (click)=\"loadFormElement(field)\" ></i></div>\n    <label class=\"col-md-12 form-control-label\" [attr.for]=\"field.label\">\n      {{field.label}}\n    </label>\n    <div class=\"col-md-12\" [ngSwitch]=\"field.type\">\n    <textbox *ngSwitchCase=\"'number'\" [field]=\"field\" [form]=\"form\"></textbox>\n    <textbox *ngSwitchCase=\"'text'\" [field]=\"field\" [form]=\"form\"></textbox>\n    <date *ngSwitchCase=\"'date'\" [field]=\"field\" [form]=\"form\"></date>\n    <slider *ngSwitchCase=\"'slider'\" [field]=\"field\" [form]=\"form\"></slider>\n      <dropdown *ngSwitchCase=\"'dropdown'\" [field]=\"field\" [form]=\"form\"></dropdown>\n      <checkbox *ngSwitchCase=\"'checkbox'\" [field]=\"field\" [form]=\"form\"></checkbox>\n      <radio *ngSwitchCase=\"'radio'\" [field]=\"field\" [form]=\"form\"></radio>\n      <file *ngSwitchCase=\"'file'\" [field]=\"field\" [form]=\"form\"></file>\n      <div style=\"float:right\">\n          <span class=\"cursor-pntr\" (click)=\"copyElement(field)\"><i class=\"fa fa-copy\"></i></span>\n          <span class=\"cursor-pntr\" (click)=\"deleteElement(field)\"><i class=\"fa fa-trash\"></i> </span>\n       </div> \n       </div>`,\n  styleUrls: []\n})\n\n// <div class=\"alert alert-danger my-1 p-2 fadeInDown animated\" *ngIf=\"!isValid && isDirty\">{{field.label}} is required</div>\n\nexport class FieldBuilderComponent implements OnInit {\n  @Input() field: any;\n  @Input() form: any;\n\n  @Output() sendDataToParent = new EventEmitter<string>();\n\n  @Output() copyOrDeleteEvent = new EventEmitter<string>();\n\n  closeResult: string;\n  modalReference: any;\n  pageNumber; any;\n  label: any;\n  type: any;\n  placeholder: any;\n  options: any;\n  newOptionKey: any;\n  newOptionLabel: any;\n\n  activeModelData: any;\n  validations: any;\n  required: any;\n  autoCollect: any;\n  openEdit: boolean = false;\n  _id: any;\n  description: any;\n  minDate: any;\n  maxDate: any;\n  min: any;\n  max: any;\n\n\n  // private modalRef: NgbModalRef;\n  @ViewChild('content', { static: false }) myModal: ElementRef;\n\n  get isValid() { return this.form.controls[this.field.name].valid; }\n  get isDirty() { return this.form.controls[this.field.name].dirty; }\n\n  constructor(\n    // private modalService: NgbModal\n  ) { }\n\n  ngOnInit() {\n\n    this.options = [];\n    this.validations = {}\n  }\n\n\n\n  loadFormElement(item) {\n\n\n    console.log(\"item ---\", item);\n\n    this.activeModelData = \"\";\n    this.label = item.label;\n    this.type = item.type;\n    this.placeholder = item.placeholder;\n    this.options = item.options;\n    this._id = item._id;\n\n    this.required = item.validations.required;\n    \n    this.description = item.description;\n\n    if (item.type == \"date\") {\n      this.minDate = item.validations.minDate;\n      this.maxDate = item.validations.maxDate\n      this.autoCollect = item.validations.autoCollect;\n    }\n    else if (item.type == \"slider\") {\n      this.min = item.validations.min;\n      this.max = item.validations.max;\n    }\n\n    this.required = this.field.validations.required;\n    \n\n\n    console.log(item.validations.required, \"item.validations.required\", this.required, \"label\", this.label);\n    // console.log(\"label\",this.label);\n\n    this.openEdit = this.openEdit ? false : true;\n    // document.getElementById(\"openModalButton\").click();\n    // this.open(this.myModal);\n    // this.myModal.show();\n    // this.myModal.nativeElement.className = 'modal fade show';\n\n  }\n\n  saveEdit() {\n  }\n  closeModel(action) {\n\n    if (action == \"save\") {\n\n\n\n      console.log(\"this.field\", this.required);\n      // this.modalReference.close();\n\n\n      // this.activeModelData.field = this.field.field;\n\n      // this.activeModelData.label = this.label;\n      // this.activeModelData.type = this.type;\n      // this.activeModelData.placeholder = this.placeholder;\n      // this.activeModelData.options = this.options;\n\n      let obj = {\n        label: this.label,\n        type: this.type,\n        placeholder: this.placeholder,\n        options: this.options,\n        validations: this.validations,\n        field: this.field,\n        _id: this._id,\n        description: this.description\n      }\n\n      if (this.type == 'date') {\n        obj['minDate'] = this.minDate;\n        obj['maxDate'] = this.maxDate\n      } else if (this.type == 'slider') {\n        obj['min'] = this.min;\n        obj['max'] = this.max;\n      }\n\n      // console.log(\"obj\",obj);\n\n\n      this.sendDataToParent.emit(JSON.stringify(obj));\n\n\n      // this.field.label = this.label;\n\n\n      this.field.label = this.label;\n      this.field.type = this.type;\n      this.field.placeholder = this.placeholder;\n      this.field.options = this.options;\n      this.field.description = this.description;\n\n      if (this.type == 'date') {\n        this.field.validations.minDate = this.minDate;\n        this.field.validations.maxDate = this.maxDate;\n        this.field.validations.autoCollect = this.autoCollect;\n      } else if (this.type == 'slider') {\n        this.field.validations.min = this.min;\n        this.field.validations.max = this.max;\n      }\n\n      // this.field.validations\n\n      console.log(\" this.field.validations.required\", this.field.validations.required, \"sdds\", this.required);\n      this.field.validations.required = this.required;\n      this.field.validations.autoCollect = this.autoCollect;\n      \n\n      // console.log(\" this.field\", this.field);\n      this.openEdit = false;\n\n      // this.sendDataToParent.emit(this.activeModelData);\n\n    } else {\n\n      this.openEdit = false;\n      // this.modalReference.close();\n    }\n\n    // this.modalService.close();\n    //  this.myModal.nativeElement.className = 'modal hide';\n  }\n\n  open(content) {\n\n\n\n    // console.log(\" this.activeModelData\", selectedData);\n    // this.modalReference = this.modalService.open(content);\n    // this.modalReference.result.then((result) => {\n    //   this.closeResult = `Closed with`;\n    // }, (reason) => {\n    //   this.closeResult = `Dismissed`;\n    // });\n  }\n\n  // private getDismissReason(reason: any): string {\n  //   // if (reason === ModalDismissReasons.ESC) {\n  //   //   return 'by pressing ESC';\n  //   // } else if (reason === ModalDismissReasons.BACKDROP_CLICK) {\n  //   //   return 'by clicking on a backdrop';\n  //   // } else {\n  //   //   return `with: ${reason}`;\n  //   // }\n  // }\n\n  deleteOption(opt, index) {\n    console.log(\"delete\", this.options);\n\n    // let newArr = [];\n    let optionsArr = this.options.filter(item => {\n      // if(item.lable==opt.label && item.key==opt.key){\n\n      // }else{\n\n      // }\n\n      return (item.label != opt.label && item.key != opt.key)\n\n      // if(item.lable==opt.label && item.key==opt.key){\n\n      // }else{\n      //   return true;\n      // }\n    })\n\n    this.options = optionsArr;\n    console.log(\"delete new \", optionsArr);\n  }\n  AddNewOptions() {\n\n    if (this.newOptionKey != \"\" && this.newOptionLabel != \"\") {\n\n      console.log(\"this.newOption\", this.newOptionLabel);\n\n      if (Array.isArray(this.options)) {\n\n      } else {\n        this.options = [];\n      }\n      this.options.push({\n        key: this.newOptionKey,\n        label: this.newOptionLabel\n      });\n\n      console.log(\"this.options.push\", this.options);\n    }\n    this.newOptionKey = \"\";\n    this.newOptionLabel = \"\";\n  }\n\n  copyElement(item) {\n    // this.field.push(item);\n    item.action = 'copy';\n    console.log(\"field ----------\", item);\n    this.copyOrDeleteEvent.emit(item);\n\n  }\n  deleteElement(item) {\n\n    item.action = 'delete';\n    this.field.isDelete = true;\n    this.copyOrDeleteEvent.emit(item);\n    console.log(\"field delete\", this.field);\n\n  }\n}\n\n","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n// text,email,tel,textarea,password, \n@Component({\n    selector: 'textbox',\n    template: `\n      <div [formGroup]=\"form\" >\n    \n        <input *ngIf=\"!field.multiline\" [attr.type]=\"field.type\" class=\"form-control\"  [id]=\"field.field\" [name]=\"field.field\" [formControlName]=\"field.field\">\n        <textarea *ngIf=\"field.multiline\" [class.is-invalid]=\"isDirty && !isValid\" [formControlName]=\"field.field\" [id]=\"field.field\"\n        rows=\"20\" class=\"form-control\" [placeholder]=\"field.placeholder\"></textarea>\n\n      </div> \n    `\n})\nexport class TextBoxComponent {\n    @Input() field:any = {};\n    @Input() form:FormGroup;\n    get isValid() { return this.form.controls[this.field.name].valid; }\n    get isDirty() { return this.form.controls[this.field.name].dirty; }\n  \n    constructor() {\n\n      // this.form.controls = this.field.name;\n      // console.log(\"form\",this.form);\n\n    }\n}","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'dropdown',\n    template: `\n      <div [formGroup]=\"form\">\n        <select class=\"form-control\" [id]=\"field.field\" [formControlName]=\"field.field\">\n          <option *ngFor=\"let opt of field.options\" [value]=\"opt.key\">{{opt.label}}</option>\n        </select>\n      </div> \n    `\n})\nexport class DropDownComponent {\n    @Input() field:any = {};\n    @Input() form:FormGroup;\n\n    constructor() {\n\n    }\n}","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n// text,email,tel,textarea,password, \n@Component({\n    selector: 'file',\n    template: `\n      <div [formGroup]=\"form\">\n        <div *ngIf=\"!field.value\" class=\"drop-container dropzone\" dropZone \\\n          (dropped)=\"field.onUpload($event)\">\n          <p class=\"m-0\">\n            Drag a file here or\n            <label class=\"upload-button\">\n              <input type=\"file\" multiple=\"\" (change)=\"field.onUpload($event.target.files)\"> browse\n            </label>\n            to upload.\n          </p>\n        </div>\n        <div *ngIf=\"field.value\">\n          <!-- <button type=\"button\" class=\"btn btn-primary\">Change</button> -->\n          <div class=\"card\">\n            <img class=\"card-img-top\" [src]=\"field.value\">\n          </div>\n        </div>\n      </div> \n    `,\n    styles:[\n      `\n      .drop-container {\n        background: #fff;\n        border-radius: 6px;\n        height: 150px;\n        width: 100%;\n        box-shadow: 1px 2px 20px hsla(0,0%,4%,.1);\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        border: 2px dashed #c0c4c7;\n      }\n      p {\n        font-size: 16px;\n        font-weight: 400;\n        color: #c0c4c7; \n      }\n      .upload-button {\n        display: inline-block;\n        border: none;\n        outline: none;\n        cursor: pointer;\n        color: #5754a3;\n      }\n      .upload-button input {\n        display: none;\n      }\n      .dropzone { \n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column; \n        border-radius: 5px;\n        background: white;\n        margin: 10px 0;\n      }\n      .dropzone.hovering {\n          border: 2px solid #f16624;\n          color: #dadada !important;\n      }\n      progress::-webkit-progress-value {\n        transition: width 0.1s ease;\n      }\n      `\n    ]\n})\nexport class FileComponent {\n    @Input() field:any = {};\n    @Input() form:FormGroup;\n    get isValid() { return this.form.controls[this.field.name].valid; }\n    get isDirty() { return this.form.controls[this.field.name].dirty; }\n  \n    constructor() {\n\n    }\n\n    ngOnChange(){\n      console.log(this.field.value);\n      // this.field.value.\n    }\n}","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'checkbox',\n    template: `\n      <div [formGroup]=\"form\">\n        <div [formGroupName]=\"field.field\" >\n          <div *ngFor=\"let opt of field.options\" class=\"form-check form-check\">\n          <label class=\"form-check-label\">\n             <input [formControlName]=\"opt.key\" class=\"form-check-input\" type=\"checkbox\" id=\"inlineCheckbox1\" value=\"option1\" />\n             {{opt.label}}</label>\n          </div>\n        </div>\n\n      </div> \n    `\n})\nexport class CheckBoxComponent {\n    @Input() field:any = {};\n    @Input() form:FormGroup;\n    get isValid() { return this.form.controls[this.field.name].valid; }\n    get isDirty() { return this.form.controls[this.field.name].dirty; }\n}","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'radio',\n    template: `\n      <div [formGroup]=\"form\">\n        <div class=\"form-check\" *ngFor=\"let opt of field.options\">\n          <input class=\"form-check-input\" type=\"radio\" [formControlName]=\"field.field\" [id]=\"field.field\" [value]=\"opt.key\" >\n          <label class=\"form-check-label\">\n            {{opt.label}}\n          </label>\n        </div>\n      </div> \n    `\n})\nexport class RadioComponent {\n    @Input() field:any = {};\n    @Input() form:FormGroup;\n}","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n// text,email,tel,textarea,password, \n@Component({\n    selector: 'date',\n    template: `\n      <div [formGroup]=\"form\" >\n    \n        <input *ngIf=\"!field.multiline\" [attr.type]=\"field.type\" class=\"form-control\"  [id]=\"field.field\" [name]=\"field.field\" [formControlName]=\"field.field\">\n        <textarea *ngIf=\"field.multiline\" [class.is-invalid]=\"isDirty && !isValid\" [formControlName]=\"field.field\" [id]=\"field.field\"\n        rows=\"20\" class=\"form-control\" [placeholder]=\"field.placeholder\"></textarea>\n\n      </div> \n    `\n})\nexport class DateComponent {\n    @Input() field:any = {};\n    @Input() form:FormGroup;\n    get isValid() { return this.form.controls[this.field.name].valid; }\n    get isDirty() { return this.form.controls[this.field.name].dirty; }\n  \n    constructor() {\n\n      // this.form.controls = this.field.name;\n      // console.log(\"form\",this.form);\n\n    }\n}","import { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n// text,email,tel,textarea,password, \n@Component({\n    selector: 'slider',\n    template: `\n      <div [formGroup]=\"form\" >\n    \n        <input *ngIf=\"!field.multiline\" type=\"hidden\" class=\"form-control\"  [id]=\"field.field\" [name]=\"field.field\" [formControlName]=\"field.field\">\n        \n        <mat-slider\n   class = \"tp-margin\"\n   [disabled] = \"false\"\n   [invert] = \"false\"      \n   [thumbLabel] = \"false\"\n   [max]=\"field.max\"\n   [min]=\"field.min\"    \n   [vertical] = \"false\">\n</mat-slider>\n\n      </div> \n    `\n})\nexport class SliderComponent {\n    @Input() field:any = {};\n    @Input() form:FormGroup;\n    get isValid() { return this.form.controls[this.field.name].valid; }\n    get isDirty() { return this.form.controls[this.field.name].dirty; }\n  \n    constructor() {\n\n      // this.form.controls = this.field.name;\n      // console.log(\"form\",this.form);\n\n    }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule,FormsModule } from '@angular/forms';\n\n\n// components\nimport { DynamicFormBuilderComponent } from './dynamic-form-builder.component';\nimport { FieldBuilderComponent } from './field-builder/field-builder.component';\nimport { TextBoxComponent } from './atoms/textbox';\nimport { DropDownComponent } from './atoms/dropdown';\nimport { FileComponent } from './atoms/file';\nimport { CheckBoxComponent } from './atoms/checkbox';\nimport { RadioComponent } from './atoms/radio';\nimport { DateComponent } from './atoms/date';\nimport { SliderComponent } from './atoms/slider';\n\n// import {MatIconModule} from '@angular/material/icon';\n// import { NgDragDropModule } from 'ng-drag-drop';\n// import { DragAndDropModule } from 'angular-draggable-droppable';\nimport { AngularFontAwesomeModule } from 'angular-font-awesome';\nimport  {\n  MatButtonModule,\n  MatRadioModule,\n  MatDatepickerModule,\n  MatFormFieldModule,\n  MatInputModule ,\n  MatSliderModule,\n  MatSelectModule\n} from '@angular/material';\nimport { DragDropModule } from \"@angular/cdk/drag-drop\";\n\n// import {  } from '@angular/cdk/'\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatButtonModule,\n    MatRadioModule,\n    MatDatepickerModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSliderModule,\n    MatSelectModule,\n    // MatIconModule\n    AngularFontAwesomeModule,\n    DragDropModule\n  ],\n  declarations: [\n    DynamicFormBuilderComponent,\n    FieldBuilderComponent,\n    TextBoxComponent,\n    DropDownComponent,\n    CheckBoxComponent,\n    FileComponent,\n    RadioComponent,\n    DateComponent,\n    SliderComponent\n    \n  ],\n  exports: [DynamicFormBuilderComponent],\n  providers: []\n})\nexport class DynamicFormBuilderModule { }\n","import { NgModule } from '@angular/core';\nimport { DynamicFormBuilderComponent } from './dynamic-form-builder.component';\n\nimport { CommonModule } from '@angular/common';\n// import { BrowserModule } from '@angular/platform-browser';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\n// import { NgbModule } from '@ng-bootstrap/ng-bootstrap';\n// dynamic form builder\nimport { DynamicFormBuilderModule } from './dynamic-form-builder/dynamic-form-builder.module';\n// import {} from './'\n\n// import { FormComponent } from './form.component';\nimport { HttpClientModule } from '@angular/common/http';\n// import { NgDragDropModule } from 'ng-drag-drop';\n// import { DragAndDropModule } from 'angular-draggable-droppable';\n\n\n// import { DragulaModule } from 'ng2-dragula';\n\nimport  { MatButtonModule,MatDatepickerModule, MatFormFieldModule,\n  MatTabsModule, MatSelectModule} from '@angular/material'\n\nimport { DndModule } from 'ngx-drag-drop';\n\n\n@NgModule({\n  declarations: [DynamicFormBuilderComponent],\n  imports: [\n    // BrowserModule,\n    CommonModule,\n     ReactiveFormsModule,\n    DynamicFormBuilderModule,\n    HttpClientModule,\n    FormsModule,\n    MatSelectModule,\n    MatTabsModule,\n    // NgbModule.forRoot(),\n    // DragulaModule.forRoot()\n    // DragAndDropModule\n    MatFormFieldModule,\n    DndModule,\n    MatButtonModule,\n    MatDatepickerModule\n  ],\n  exports: [DynamicFormBuilderComponent]\n})\nexport class DynamicFormBuilderModule1 {\n\n\n }\n"]}